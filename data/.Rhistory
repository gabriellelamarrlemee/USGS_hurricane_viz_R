#     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
})
}
shinyApp(ui, server)
shinyApp(ui, server)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
# addMarkers(lng=-81.1637, lat=33.8361, popup="Test popup") %>%
setView(lng=-76.1637, lat=33.8361, zoom=7)
})
# output$graph <- renderDygraph({ # Build flooding graphs
#     # All selected on one graph
#     dygraph(stream_ts, main = "Water at selected USGS gages") %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-12 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000', drawGrid = FALSE) %>%
#         dyShading(from = "0", to = "40", color = "#EFEFEF", axis = "y")
# })
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
# cat(file=stderr(), "debug ", s, "\n")
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
radius = 20, popup = ~station_nm, layerId=~station_nm)
})
observe({ # Add hurricane path
for (i in unique(pts_wgs84_groups$group)) {
group_sub <- pts_wgs84_groups[which(pts_wgs84_groups$group == i), ]
if(group_sub[2,]$dateTime <= input$time) {
leafletProxy("map", data = group_sub) %>%
addPolylines(lng = ~LON, lat = ~LAT, weight = ~INTENSITY/10,
popup = ~STORMTYPE, layerId=~dateTime, opacity = 1.0)
}
}
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water level at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-12 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000', drawGrid = FALSE) %>%
dyShading(from = "0", to = "40", color = "#EFEFEF", axis = "y")
})
})
# Add interaction events
observeEvent(input$graph_click$x, { # This could identify which line goes to which gage (also on hover)
cat(file=stderr(), "debug ", input$graph_click$series, "\n")
# on our click let's update the dygraph to only show the time series for the clicked
# updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
# output$graph <- renderDygraph({
#     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
# addMarkers(lng=-81.1637, lat=33.8361, popup="Test popup") %>%
setView(lng=-76.1637, lat=33.8361, zoom=7)
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
# cat(file=stderr(), "debug ", s, "\n")
})
observe({ # Add gages
leafletProxy("map", data = subset(streamdata_time, dateTime == input$time)) %>%
addCircles(lng = ~dec_long_va,
lat = ~dec_lat_va,
weight = ~flood_norm * 10,
color = "blue",
fillOpacity = 0.15,
radius = 20, popup = ~station_nm, layerId=~station_nm)
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
color = "blue", fillOpacity = 1,
radius = 20, popup = ~station_nm)
})
observe({ # Add hurricane path
for (i in unique(pts_wgs84_groups$group)) {
group_sub <- pts_wgs84_groups[which(pts_wgs84_groups$group == i), ]
if(group_sub[2,]$dateTime <= input$time) {
leafletProxy("map", data = group_sub) %>%
addPolylines(lng = ~LON, lat = ~LAT, weight = ~INTENSITY/10,
popup = ~STORMTYPE, layerId=~dateTime, opacity = 1.0)
}
}
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water level at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-12 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000', drawGrid = FALSE) %>%
dyShading(from = "0", to = "40", color = "#EFEFEF", axis = "y")
})
})
# Add interaction events
observeEvent(input$graph_click$x, { # This could identify which line goes to which gage (also on hover)
cat(file=stderr(), "debug ", input$graph_click$series, "\n")
# on our click let's update the dygraph to only show the time series for the clicked
# updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
# output$graph <- renderDygraph({
#     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
})
}
shinyApp(ui, server)
streamdata_time <- merge(streamdata_filtered, gages_filtered, by="site_no")
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
# addMarkers(lng=-81.1637, lat=33.8361, popup="Test popup") %>%
setView(lng=-76.1637, lat=33.8361, zoom=7)
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
# cat(file=stderr(), "debug ", s, "\n")
})
observe({ # Add gages
leafletProxy("map", data = subset(streamdata_time, dateTime == input$time)) %>%
addCircles(lng = ~dec_long_va,
lat = ~dec_lat_va,
weight = ~flood_norm * 10,
color = "blue",
fillOpacity = 0.15,
radius = 20, popup = ~station_nm, layerId=~station_nm)
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
color = "blue", fillOpacity = 1,
radius = 20, popup = ~station_nm)
})
observe({ # Add hurricane path
for (i in unique(pts_wgs84_groups$group)) {
group_sub <- pts_wgs84_groups[which(pts_wgs84_groups$group == i), ]
if(group_sub[2,]$dateTime <= input$time) {
leafletProxy("map", data = group_sub) %>%
addPolylines(lng = ~LON, lat = ~LAT, weight = ~INTENSITY/10,
popup = ~STORMTYPE, layerId=~dateTime, opacity = 1.0)
}
}
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water level at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-12 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000', drawGrid = FALSE) %>%
dyShading(from = "0", to = "40", color = "#EFEFEF", axis = "y")
})
})
# Add interaction events
observeEvent(input$graph_click$x, { # This could identify which line goes to which gage (also on hover)
cat(file=stderr(), "debug ", input$graph_click$series, "\n")
# on our click let's update the dygraph to only show the time series for the clicked
# updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
# output$graph <- renderDygraph({
#     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
})
}
shinyApp(ui, server)
install.packages("leaflet.minicharts")
library(leaflet.minicharts)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
# addMarkers(lng=-81.1637, lat=33.8361, popup="Test popup") %>%
setView(lng=-76.1637, lat=33.8361, zoom=7)
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
# cat(file=stderr(), "debug ", s, "\n")
})
observe({ # Add gages
leafletProxy("map", data = subset(streamdata_time, dateTime == input$time)) %>%
addCircles(lng = ~dec_long_va,
lat = ~dec_lat_va,
weight = ~flood_norm * 10,
color = "blue",
fillOpacity = 0.15,
radius = 20, popup = ~station_nm, layerId=~station_nm)
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
color = "blue", fillOpacity = 1,
radius = 20, popup = ~station_nm)
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addMinicharts(
lng = ~dec_long_va, lat = ~dec_lat_va,
colorPalette = "blue",
width = 45, height = 45
)
# addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
#            color = "blue", fillOpacity = 1,
#            radius = 20, popup = ~station_nm)
})
observe({ # Add hurricane path
for (i in unique(pts_wgs84_groups$group)) {
group_sub <- pts_wgs84_groups[which(pts_wgs84_groups$group == i), ]
if(group_sub[2,]$dateTime <= input$time) {
leafletProxy("map", data = group_sub) %>%
addPolylines(lng = ~LON, lat = ~LAT, weight = ~INTENSITY/10,
popup = ~STORMTYPE, layerId=~dateTime, opacity = 1.0)
}
}
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water level at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-12 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000', drawGrid = FALSE) %>%
dyShading(from = "0", to = "40", color = "#EFEFEF", axis = "y")
})
})
# Add interaction events
observeEvent(input$graph_click$x, { # This could identify which line goes to which gage (also on hover)
cat(file=stderr(), "debug ", input$graph_click$series, "\n")
# on our click let's update the dygraph to only show the time series for the clicked
# updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
# output$graph <- renderDygraph({
#     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
})
}
shinyApp(ui, server)
View(streamdata_time)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
# addMarkers(lng=-81.1637, lat=33.8361, popup="Test popup") %>%
setView(lng=-76.1637, lat=33.8361, zoom=7)
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
# cat(file=stderr(), "debug ", s, "\n")
})
observe({ # Add gages
leafletProxy("map", data = subset(streamdata_time, dateTime == input$time)) %>%
addCircles(lng = ~dec_long_va,
lat = ~dec_lat_va,
weight = ~flood_norm * 10,
color = "blue",
fillOpacity = 0.15,
radius = 20, popup = ~station_nm, layerId=~station_nm)
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
color = "blue", fillOpacity = 1,
radius = 20, popup = ~station_nm)
})
observe({ # Add gages
leafletProxy("map", data = subset(streamdata_time, dateTime == input$time)) %>%
addMinicharts(
lng = ~dec_long_va, lat = ~dec_lat_va,
chartdata = ~flood_norm,
colorPalette = "blue",
width = 45, height = 45
)
# addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
#            color = "blue", fillOpacity = 1,
#            radius = 20, popup = ~station_nm)
})
observe({ # Add hurricane path
for (i in unique(pts_wgs84_groups$group)) {
group_sub <- pts_wgs84_groups[which(pts_wgs84_groups$group == i), ]
if(group_sub[2,]$dateTime <= input$time) {
leafletProxy("map", data = group_sub) %>%
addPolylines(lng = ~LON, lat = ~LAT, weight = ~INTENSITY/10,
popup = ~STORMTYPE, layerId=~dateTime, opacity = 1.0)
}
}
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water level at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-12 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000', drawGrid = FALSE) %>%
dyShading(from = "0", to = "40", color = "#EFEFEF", axis = "y")
})
})
# Add interaction events
observeEvent(input$graph_click$x, { # This could identify which line goes to which gage (also on hover)
cat(file=stderr(), "debug ", input$graph_click$series, "\n")
# on our click let's update the dygraph to only show the time series for the clicked
# updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
# output$graph <- renderDygraph({
#     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
# titlePanel("Hurricane Florence"),
tags$style(type = "text/css", "
html, body, #map {width:100%;height:calc(100vh)}
.irs-bar {width: 100%; height: 25px; background: black; border: none;}
.irs-bar-edge {background: black; border: none; height: 25px; border-radius: 3px; width: 20px;}
.irs-line {border: none; height: 25px; border-radius: 0px;}
.irs-grid-text {font-family: 'arial'; color: white; bottom: 17px; z-index: 1;}
.irs-grid-pol {display: none;}
.irs-max {font-family: 'arial'; color: black;}
.irs-min {font-family: 'arial'; color: black;}
.irs-single {color:black; background:#6666ff;}
.irs-slider {width: 30px; height: 30px; top: 22px;}
.dygraph-rangesel-bgcanvas {display: none;}
.dygraph-rangesel-fgcanvas {display: none;}
.dygraph-rangesel-zoomhandle {display: none;}
.form-group {padding-left: 26px;}
"),
leafletOutput("map", width="100%", height="100vh"),
absolutePanel(bottom = 200, right = 0, left = 0, fixed = TRUE,
width = 600, height = 100,
style = "margin-left: auto;margin-right: auto;",
dygraphOutput("graph", width = "100%", height = "200px"),
sliderInput("time", "date/time",
min = as.POSIXct("2018-09-12 00:00:00"),
max = as.POSIXct("2018-09-19 11:00:00"),
value = as.POSIXct("2018-09-12 00:00:00"),
step = 21600, # 1 hour is 3600
animate = T, width = "100%",
ticks = T, timeFormat = "%a %b %o %I%P",
label = NULL)
)
)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
# addMarkers(lng=-81.1637, lat=33.8361, popup="Test popup") %>%
setView(lng=-76.1637, lat=33.8361, zoom=7)
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
# cat(file=stderr(), "debug ", s, "\n")
})
observe({ # Add gages
leafletProxy("map", data = subset(streamdata_time, dateTime == input$time)) %>%
addCircles(lng = ~dec_long_va,
lat = ~dec_lat_va,
weight = ~flood_norm * 10,
color = "blue",
fillOpacity = 0.15,
radius = 20, popup = ~station_nm, layerId=~station_nm)
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
color = "blue", fillOpacity = 1,
radius = 20, popup = ~station_nm)
})
# observe({ # Add gages
#     leafletProxy("map", data = subset(streamdata_time, dateTime == input$time)) %>%
#         addMinicharts(
#             lng = ~dec_long_va, lat = ~dec_lat_va,
#             chartdata = ~flood_norm,
#             width = 45, height = 45
#         )
#         # addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
#         #            color = "blue", fillOpacity = 1,
#         #            radius = 20, popup = ~station_nm)
# })
observe({ # Add hurricane path
for (i in unique(pts_wgs84_groups$group)) {
group_sub <- pts_wgs84_groups[which(pts_wgs84_groups$group == i), ]
if(group_sub[2,]$dateTime <= input$time) {
leafletProxy("map", data = group_sub) %>%
addPolylines(lng = ~LON, lat = ~LAT, weight = ~INTENSITY/10,
popup = ~STORMTYPE, layerId=~dateTime, opacity = 1.0)
}
}
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water level at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-12 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000', drawGrid = FALSE) %>%
dyShading(from = "0", to = "40", color = "#EFEFEF", axis = "y")
})
})
# Add interaction events
observeEvent(input$graph_click$x, { # This could identify which line goes to which gage (also on hover)
cat(file=stderr(), "debug ", input$graph_click$series, "\n")
# on our click let's update the dygraph to only show the time series for the clicked
# updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
# output$graph <- renderDygraph({
#     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
})
}
shinyApp(ui, server)
