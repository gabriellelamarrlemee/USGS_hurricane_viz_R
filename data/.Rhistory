precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
# addMarkers(lng=-81.1637, lat=33.8361, popup="Test popup") %>%
setView(lng=-76.1637, lat=33.8361, zoom=7)
})
output$graph <- renderDygraph({ # Build flooding graphs
# All selected on one graph
dygraph(stream_ts, main = "Water at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50)) %>%
dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000') %>%
dyHighlight(highlightSeriesBackgroundAlpha = 1) -> d1
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
# cat(file=stderr(), "debug ", s, "\n")
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
radius = 20, popup = ~station_nm, layerId=~station_nm)
})
observe({ # Add hurricane path
for (i in unique(pts_wgs84_groups$group)) {
group_sub <- pts_wgs84_groups[which(pts_wgs84_groups$group == i), ]
if(group_sub[2,]$dateTime <= input$time) {
leafletProxy("map", data = group_sub) %>%
addPolylines(lng = ~LON, lat = ~LAT, weight = ~INTENSITY/10,
popup = ~STORMTYPE, layerId=~dateTime, opacity = 1.0)
}
}
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50)) %>%
dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000') %>%
dyHighlight(highlightSeriesBackgroundAlpha = 1) -> d1
})
})
# Add interaction events
observeEvent(input$graph_click$x, { # This could identify which line goes to which gage (also on hover)
cat(file=stderr(), "debug ", input$graph_click$x, "\n")
cat(file=stderr(), "debug ", input$graph_click$name, "\n")
cat(file=stderr(), "debug ", input$graph_click$series_name, "\n")
cat(file=stderr(), "debug ", input$graph_click$series, "\n")
# on our click let's update the dygraph to only show the time series for the clicked
# updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
# output$graph <- renderDygraph({
#     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
})
# dyCallbacks("graph", { highlightCallback
#     cat(file=stderr(), "debug ", seriesName, "\n")
# })
}
shinyApp(ui, server)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
# addMarkers(lng=-81.1637, lat=33.8361, popup="Test popup") %>%
setView(lng=-76.1637, lat=33.8361, zoom=7)
})
output$graph <- renderDygraph({ # Build flooding graphs
# All selected on one graph
dygraph(stream_ts, main = "Water at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50)) %>%
dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000') %>%
dyHighlight(highlightSeriesBackgroundAlpha = 1) -> d1
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
# cat(file=stderr(), "debug ", s, "\n")
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
radius = 20, popup = ~station_nm, layerId=~station_nm)
})
observe({ # Add hurricane path
for (i in unique(pts_wgs84_groups$group)) {
group_sub <- pts_wgs84_groups[which(pts_wgs84_groups$group == i), ]
if(group_sub[2,]$dateTime <= input$time) {
leafletProxy("map", data = group_sub) %>%
addPolylines(lng = ~LON, lat = ~LAT, weight = ~INTENSITY/10,
popup = ~STORMTYPE, layerId=~dateTime, opacity = 1.0)
}
}
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50)) %>%
dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000') %>%
dyHighlight(highlightSeriesBackgroundAlpha = 1) -> d1
})
})
# Add interaction events
observeEvent(input$graph_hover$x, { # This could identify which line goes to which gage (also on hover)
cat(file=stderr(), "debug ", input$graph_click$series_name, "\n")
# on our click let's update the dygraph to only show the time series for the clicked
# updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
# output$graph <- renderDygraph({
#     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
# titlePanel("Hurricane Florence"),
tags$style(type = "text/css", "html, body, #map {width:100%;height:calc(100vh)}"),
leafletOutput("map", width="100%", height="100vh"),
absolutePanel(top = 30, right = 50,
# style='background-color: #ffffff',
width = 270, height = "auto",
sliderInput("time", "date/time", min(precip_merge$time),
max(precip_merge$time),
value = min(precip_merge$time),
step=21600, # 1 hour is 3600
animate=T),
dygraphOutput("graph",
hover = "plot_hover")
)
)
ui <- bootstrapPage(
# titlePanel("Hurricane Florence"),
tags$style(type = "text/css", "html, body, #map {width:100%;height:calc(100vh)}"),
leafletOutput("map", width="100%", height="100vh"),
absolutePanel(top = 30, right = 50,
# style='background-color: #ffffff',
width = 270, height = "auto",
sliderInput("time", "date/time", min(precip_merge$time),
max(precip_merge$time),
value = min(precip_merge$time),
step=21600, # 1 hour is 3600
animate=T),
dygraphOutput("graph")
)
)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
# addMarkers(lng=-81.1637, lat=33.8361, popup="Test popup") %>%
setView(lng=-76.1637, lat=33.8361, zoom=7)
})
output$graph <- renderDygraph({ # Build flooding graphs
# All selected on one graph
dygraph(stream_ts, main = "Water at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50)) %>%
dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000')
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
# cat(file=stderr(), "debug ", s, "\n")
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
radius = 20, popup = ~station_nm, layerId=~station_nm)
})
observe({ # Add hurricane path
for (i in unique(pts_wgs84_groups$group)) {
group_sub <- pts_wgs84_groups[which(pts_wgs84_groups$group == i), ]
if(group_sub[2,]$dateTime <= input$time) {
leafletProxy("map", data = group_sub) %>%
addPolylines(lng = ~LON, lat = ~LAT, weight = ~INTENSITY/10,
popup = ~STORMTYPE, layerId=~dateTime, opacity = 1.0)
}
}
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50)) %>%
dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000')
})
})
# Add interaction events
observeEvent(input$graph_highlight$x, { # This could identify which line goes to which gage (also on hover)
cat(file=stderr(), "debug ", input$graph_click$series_name, "\n")
# on our click let's update the dygraph to only show the time series for the clicked
# updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
# output$graph <- renderDygraph({
#     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
# addMarkers(lng=-81.1637, lat=33.8361, popup="Test popup") %>%
setView(lng=-76.1637, lat=33.8361, zoom=7)
})
output$graph <- renderDygraph({ # Build flooding graphs
# All selected on one graph
dygraph(stream_ts, main = "Water at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50)) %>%
dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000')
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
# cat(file=stderr(), "debug ", s, "\n")
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
radius = 20, popup = ~station_nm, layerId=~station_nm)
})
observe({ # Add hurricane path
for (i in unique(pts_wgs84_groups$group)) {
group_sub <- pts_wgs84_groups[which(pts_wgs84_groups$group == i), ]
if(group_sub[2,]$dateTime <= input$time) {
leafletProxy("map", data = group_sub) %>%
addPolylines(lng = ~LON, lat = ~LAT, weight = ~INTENSITY/10,
popup = ~STORMTYPE, layerId=~dateTime, opacity = 1.0)
}
}
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50)) %>%
dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(colors = '#000')
})
})
# Add interaction events
observeEvent(input$graph_mouseover$x, { # This could identify which line goes to which gage (also on hover)
cat(file=stderr(), "debug ", input$graph_click$series_name, "\n")
# on our click let's update the dygraph to only show the time series for the clicked
# updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
# output$graph <- renderDygraph({
#     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
})
}
shinyApp(ui, server)
library(plotly)
install.packages("plotly")
View(stream_cast)
View(stream_cast)
ui <- bootstrapPage(
# titlePanel("Hurricane Florence"),
tags$style(type = "text/css", "html, body, #map {width:100%;height:calc(100vh)}"),
leafletOutput("map", width="100%", height="100vh"),
absolutePanel(top = 30, right = 50,
# style='background-color: #ffffff',
width = 270, height = "auto",
sliderInput("time", "date/time", min(precip_merge$time),
max(precip_merge$time),
value = min(precip_merge$time),
step=21600, # 1 hour is 3600
animate=T),
# dygraphOutput("graph")
plotlyOutput("plot")
)
)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
# addMarkers(lng=-81.1637, lat=33.8361, popup="Test popup") %>%
setView(lng=-76.1637, lat=33.8361, zoom=7)
})
# output$graph <- renderDygraph({ # Build flooding graphs
#     # All selected on one graph
#     dygraph(stream_ts, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
output$plot <- renderPlotly({ # Build flooding graphs
# All selected on one graph
plot_ly(stream_cast, x=~dateTime, y=~'2096500')
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
# cat(file=stderr(), "debug ", s, "\n")
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
radius = 20, popup = ~station_nm, layerId=~station_nm)
})
observe({ # Add hurricane path
for (i in unique(pts_wgs84_groups$group)) {
group_sub <- pts_wgs84_groups[which(pts_wgs84_groups$group == i), ]
if(group_sub[2,]$dateTime <= input$time) {
leafletProxy("map", data = group_sub) %>%
addPolylines(lng = ~LON, lat = ~LAT, weight = ~INTENSITY/10,
popup = ~STORMTYPE, layerId=~dateTime, opacity = 1.0)
}
}
})
# observe({
#     input$time # Update the time series to align with the map
#     updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
#     output$graph <- renderDygraph({
#         dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#             dyAxis("y", valueRange = c(-18,50)) %>%
#             dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#             dyLegend(show="never") %>%
#             dyOptions(colors = '#000')
#
#     })
# })
# Add interaction events
# observeEvent(input$graph_mouseover$x, { # This could identify which line goes to which gage (also on hover)
#     cat(file=stderr(), "debug ", input$graph_click$series_name, "\n")
#     # on our click let's update the dygraph to only show the time series for the clicked
#     # updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
#     # output$graph <- renderDygraph({
#     #     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#     #         dyAxis("y", valueRange = c(-18,50)) %>%
#     #         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#     #         dyLegend(show="never") %>%
#     #         dyOptions(colors = '#000')
#     # })
# })
}
shinyApp(ui, server)
library(shiny)
setwd("~/Desktop/USGS/hurricane_viz_R/data")
library(jsonlite)
library(sf)
library(geojsonsf)
library(leaflet)
library(dygraphs)
library(reshape2)
library(xts)
library(shiny)
library(plotly)
ui <- bootstrapPage(
# titlePanel("Hurricane Florence"),
tags$style(type = "text/css", "html, body, #map {width:100%;height:calc(100vh)}"),
leafletOutput("map", width="100%", height="100vh"),
absolutePanel(top = 30, right = 50,
# style='background-color: #ffffff',
width = 270, height = "auto",
sliderInput("time", "date/time", min(precip_merge$time),
max(precip_merge$time),
value = min(precip_merge$time),
step=21600, # 1 hour is 3600
animate=T),
# dygraphOutput("graph")
plotlyOutput("plot")
)
)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
# addMarkers(lng=-81.1637, lat=33.8361, popup="Test popup") %>%
setView(lng=-76.1637, lat=33.8361, zoom=7)
})
# output$graph <- renderDygraph({ # Build flooding graphs
#     # All selected on one graph
#     dygraph(stream_ts, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#         dyAxis("y", valueRange = c(-18,50)) %>%
#         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#         dyLegend(show="never") %>%
#         dyOptions(colors = '#000')
# })
output$plot <- renderPlotly({ # Build flooding graphs
# All selected on one graph
plot_ly(stream_cast, x=~dateTime, y=~'2096500')
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
# cat(file=stderr(), "debug ", s, "\n")
})
observe({ # Add gages
leafletProxy("map", data = gages_filtered) %>%
addCircles(lng = ~dec_long_va, lat = ~dec_lat_va, weight = 5,
radius = 20, popup = ~station_nm, layerId=~station_nm)
})
observe({ # Add hurricane path
for (i in unique(pts_wgs84_groups$group)) {
group_sub <- pts_wgs84_groups[which(pts_wgs84_groups$group == i), ]
if(group_sub[2,]$dateTime <= input$time) {
leafletProxy("map", data = group_sub) %>%
addPolylines(lng = ~LON, lat = ~LAT, weight = ~INTENSITY/10,
popup = ~STORMTYPE, layerId=~dateTime, opacity = 1.0)
}
}
})
# observe({
#     input$time # Update the time series to align with the map
#     updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
#     output$graph <- renderDygraph({
#         dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#             dyAxis("y", valueRange = c(-18,50)) %>%
#             dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#             dyLegend(show="never") %>%
#             dyOptions(colors = '#000')
#
#     })
# })
# Add interaction events
# observeEvent(input$graph_mouseover$x, { # This could identify which line goes to which gage (also on hover)
#     cat(file=stderr(), "debug ", input$graph_click$series_name, "\n")
#     # on our click let's update the dygraph to only show the time series for the clicked
#     # updated <- stream_ts[paste('2018/',as.Date(input$time),sep="")]
#     # output$graph <- renderDygraph({
#     #     dygraph(updated, main = "Water at selected USGS gages", width = '270', height = '700') %>%
#     #         dyAxis("y", valueRange = c(-18,50)) %>%
#     #         dyRangeSelector(dateWindow = c("2018-09-11 04:00:00", "2018-09-19 14:00:00"), height = 20) %>%
#     #         dyLegend(show="never") %>%
#     #         dyOptions(colors = '#000')
#     # })
# })
}
shinyApp(ui, server)
library(plotly)
install.packages("plotly")
install.packages("rgeolocate")
devtools::install_github( repo = "ironholds/rgeolocate" )
install.packages("devtools")
devtools::install_github( repo = "ironholds/rgeolocate" )
library(devtools)
