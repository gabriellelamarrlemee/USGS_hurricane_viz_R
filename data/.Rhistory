dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-13 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(drawGrid = FALSE) %>%
# dyShading(from = "-20", to = "0", color = "#EFEFEF", axis = "y") %>%
dyHighlight(highlightCircleSize = 0, highlightSeriesBackgroundAlpha = 1)  %>%
# Below 0 is gray
dySeries("2096500B", color = "gray") %>%
dySeries("2096960B", color = "gray") %>%
dySeries("2100500B", color = "gray") %>%
dySeries("2102000B", color = "gray") %>%
dySeries("2102500B", color = "gray") %>%
dySeries("2103000B", color = "gray") %>%
dySeries("2104000B", color = "gray") %>%
dySeries("2105769B", color = "gray") %>%
dySeries("2106500B", color = "gray") %>%
dySeries("2108000B", color = "gray") %>%
dySeries("2108566B", color = "gray") %>%
# Above 0 is black
dySeries("2096500A", color = "black") %>%
dySeries("2096960A", color = "black") %>%
dySeries("2100500A", color = "black") %>%
dySeries("2102000A", color = "black") %>%
dySeries("2102500A", color = "black") %>%
dySeries("2103000A", color = "black") %>%
dySeries("2104000A", color = "black") %>%
dySeries("2105769A", color = "black") %>%
dySeries("2106500A", color = "black") %>%
dySeries("2108000A", color = "black") %>%
dySeries("2108566A", color = "black")
})
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
setView(lng=-76.1637, lat=33.8361, zoom=7) %>%
addMinicharts(lng = streamdata_time_new$dec_long_va,
lat = streamdata_time_new$dec_lat_va,
layerId = streamdata_time_new$station_nm,
type = "bar", maxValues = 42,
width = 15, height = 120, fillColor = "#0f284a")
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
})
observe({ # Add gages
data <- subset(streamdata_time_new, dateTime == input$time)
leafletProxy("map") %>%
updateMinicharts(
layerId = data$station_nm,
chartdata = data$flood_norm
)
})
observe({ # Add hurricane path
dat <- subset(pts_wgs84, dateTime <= input$time)
d <- points_to_line(dat, "LON", "LAT", sort_field = "dateTime")
leafletProxy("map", data = d) %>%
addPolylines(color="#0f284a", opacity=0.25, layerId='hurricanePath')
# addPolylines(color="#0f284a", opacity=1, weight=~LON/10)
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',input$time,sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water level at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-13 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(drawGrid = FALSE) %>%
dyLimit(dygraph, 0, label = NULL, labelLoc = "left",
color = "black", strokePattern = "dashed") %>%
# dyShading(from = "-20", to = "0", color = "#EFEFEF", axis = "y") %>%
dyHighlight(highlightCircleSize = 0, highlightSeriesBackgroundAlpha = 1)  %>%
# Below 0 is gray
dySeries("2096500B", color = "gray") %>%
dySeries("2096960B", color = "gray") %>%
dySeries("2100500B", color = "gray") %>%
dySeries("2102000B", color = "gray") %>%
dySeries("2102500B", color = "gray") %>%
dySeries("2103000B", color = "gray") %>%
dySeries("2104000B", color = "gray") %>%
dySeries("2105769B", color = "gray") %>%
dySeries("2106500B", color = "gray") %>%
dySeries("2108000B", color = "gray") %>%
dySeries("2108566B", color = "gray") %>%
# Above 0 is black
dySeries("2096500A", color = "black") %>%
dySeries("2096960A", color = "black") %>%
dySeries("2100500A", color = "black") %>%
dySeries("2102000A", color = "black") %>%
dySeries("2102500A", color = "black") %>%
dySeries("2103000A", color = "black") %>%
dySeries("2104000A", color = "black") %>%
dySeries("2105769A", color = "black") %>%
dySeries("2106500A", color = "black") %>%
dySeries("2108000A", color = "black") %>%
dySeries("2108566A", color = "black")
})
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
setView(lng=-76.1637, lat=33.8361, zoom=7) %>%
addMinicharts(lng = streamdata_time_new$dec_long_va,
lat = streamdata_time_new$dec_lat_va,
layerId = streamdata_time_new$station_nm,
type = "bar", maxValues = 42,
width = 15, height = 120, fillColor = "#0f284a")
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
})
observe({ # Add gages
data <- subset(streamdata_time_new, dateTime == input$time)
leafletProxy("map") %>%
updateMinicharts(
layerId = data$station_nm,
chartdata = data$flood_norm
)
})
observe({ # Add hurricane path
dat <- subset(pts_wgs84, dateTime <= input$time)
d <- points_to_line(dat, "LON", "LAT", sort_field = "dateTime")
leafletProxy("map", data = d) %>%
addPolylines(color="#0f284a", opacity=0.25, layerId='hurricanePath')
# addPolylines(color="#0f284a", opacity=1, weight=~LON/10)
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',input$time,sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water level at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-13 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(drawGrid = FALSE) %>%
dyLimit(limit=0, label = NULL, labelLoc = "left",
color = "black", strokePattern = "dashed") %>%
# dyShading(from = "-20", to = "0", color = "#EFEFEF", axis = "y") %>%
dyHighlight(highlightCircleSize = 0, highlightSeriesBackgroundAlpha = 1)  %>%
# Below 0 is gray
dySeries("2096500B", color = "gray") %>%
dySeries("2096960B", color = "gray") %>%
dySeries("2100500B", color = "gray") %>%
dySeries("2102000B", color = "gray") %>%
dySeries("2102500B", color = "gray") %>%
dySeries("2103000B", color = "gray") %>%
dySeries("2104000B", color = "gray") %>%
dySeries("2105769B", color = "gray") %>%
dySeries("2106500B", color = "gray") %>%
dySeries("2108000B", color = "gray") %>%
dySeries("2108566B", color = "gray") %>%
# Above 0 is black
dySeries("2096500A", color = "black") %>%
dySeries("2096960A", color = "black") %>%
dySeries("2100500A", color = "black") %>%
dySeries("2102000A", color = "black") %>%
dySeries("2102500A", color = "black") %>%
dySeries("2103000A", color = "black") %>%
dySeries("2104000A", color = "black") %>%
dySeries("2105769A", color = "black") %>%
dySeries("2106500A", color = "black") %>%
dySeries("2108000A", color = "black") %>%
dySeries("2108566A", color = "black")
})
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
setView(lng=-76.1637, lat=33.8361, zoom=7) %>%
addMinicharts(lng = streamdata_time_new$dec_long_va,
lat = streamdata_time_new$dec_lat_va,
layerId = streamdata_time_new$station_nm,
type = "bar", maxValues = 42,
width = 15, height = 120, fillColor = "#0f284a")
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
})
observe({ # Add gages
data <- subset(streamdata_time_new, dateTime == input$time)
leafletProxy("map") %>%
updateMinicharts(
layerId = data$station_nm,
chartdata = data$flood_norm
)
})
observe({ # Add hurricane path
dat <- subset(pts_wgs84, dateTime <= input$time)
d <- points_to_line(dat, "LON", "LAT", sort_field = "dateTime")
leafletProxy("map", data = d) %>%
addPolylines(color="#0f284a", opacity=0.25, layerId='hurricanePath')
# addPolylines(color="#0f284a", opacity=1, weight=~LON/10)
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',input$time,sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water level at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-13 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(drawGrid = FALSE) %>%
dyLimit(limit=0, label = "flooding", labelLoc = "left",
color = "black", strokePattern = "dashed") %>%
# dyShading(from = "-20", to = "0", color = "#EFEFEF", axis = "y") %>%
dyHighlight(highlightCircleSize = 0, highlightSeriesBackgroundAlpha = 1)  %>%
# Below 0 is gray
dySeries("2096500B", color = "gray") %>%
dySeries("2096960B", color = "gray") %>%
dySeries("2100500B", color = "gray") %>%
dySeries("2102000B", color = "gray") %>%
dySeries("2102500B", color = "gray") %>%
dySeries("2103000B", color = "gray") %>%
dySeries("2104000B", color = "gray") %>%
dySeries("2105769B", color = "gray") %>%
dySeries("2106500B", color = "gray") %>%
dySeries("2108000B", color = "gray") %>%
dySeries("2108566B", color = "gray") %>%
# Above 0 is black
dySeries("2096500A", color = "black") %>%
dySeries("2096960A", color = "black") %>%
dySeries("2100500A", color = "black") %>%
dySeries("2102000A", color = "black") %>%
dySeries("2102500A", color = "black") %>%
dySeries("2103000A", color = "black") %>%
dySeries("2104000A", color = "black") %>%
dySeries("2105769A", color = "black") %>%
dySeries("2106500A", color = "black") %>%
dySeries("2108000A", color = "black") %>%
dySeries("2108566A", color = "black")
})
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
setView(lng=-76.1637, lat=33.8361, zoom=7) %>%
addMinicharts(lng = streamdata_time_new$dec_long_va,
lat = streamdata_time_new$dec_lat_va,
layerId = streamdata_time_new$station_nm,
type = "bar", maxValues = 42,
width = 15, height = 120, fillColor = "#0f284a",
opacity = 0.25)
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
})
observe({ # Add gages
data <- subset(streamdata_time_new, dateTime == input$time)
leafletProxy("map") %>%
updateMinicharts(
layerId = data$station_nm,
chartdata = data$flood_norm
)
})
observe({ # Add hurricane path
dat <- subset(pts_wgs84, dateTime <= input$time)
d <- points_to_line(dat, "LON", "LAT", sort_field = "dateTime")
leafletProxy("map", data = d) %>%
addPolylines(color="#0f284a", opacity=0.25, layerId='hurricanePath')
# addPolylines(color="#0f284a", opacity=1, weight=~LON/10)
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',input$time,sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water level at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-13 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(drawGrid = FALSE) %>%
dyLimit(limit=0, label = "flooding", labelLoc = "left",
color = "black", strokePattern = "dashed") %>%
# dyShading(from = "-20", to = "0", color = "#EFEFEF", axis = "y") %>%
dyHighlight(highlightCircleSize = 0, highlightSeriesBackgroundAlpha = 1)  %>%
# Below 0 is gray
dySeries("2096500B", color = "gray") %>%
dySeries("2096960B", color = "gray") %>%
dySeries("2100500B", color = "gray") %>%
dySeries("2102000B", color = "gray") %>%
dySeries("2102500B", color = "gray") %>%
dySeries("2103000B", color = "gray") %>%
dySeries("2104000B", color = "gray") %>%
dySeries("2105769B", color = "gray") %>%
dySeries("2106500B", color = "gray") %>%
dySeries("2108000B", color = "gray") %>%
dySeries("2108566B", color = "gray") %>%
# Above 0 is black
dySeries("2096500A", color = "black") %>%
dySeries("2096960A", color = "black") %>%
dySeries("2100500A", color = "black") %>%
dySeries("2102000A", color = "black") %>%
dySeries("2102500A", color = "black") %>%
dySeries("2103000A", color = "black") %>%
dySeries("2104000A", color = "black") %>%
dySeries("2105769A", color = "black") %>%
dySeries("2106500A", color = "black") %>%
dySeries("2108000A", color = "black") %>%
dySeries("2108566A", color = "black")
})
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
setView(lng=-76.1637, lat=33.8361, zoom=7) %>%
addMinicharts(lng = streamdata_time_new$dec_long_va,
lat = streamdata_time_new$dec_lat_va,
layerId = streamdata_time_new$station_nm,
type = "bar", maxValues = 42,
width = 15, height = 120, fillColor = "#0f284a")
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
})
observe({ # Add gages
data <- subset(streamdata_time_new, dateTime == input$time)
leafletProxy("map") %>%
updateMinicharts(
layerId = data$station_nm,
chartdata = data$flood_norm,
opacity = if(data$flood_norm < 0) { 0.25 } else { 1 }
)
})
observe({ # Add hurricane path
dat <- subset(pts_wgs84, dateTime <= input$time)
d <- points_to_line(dat, "LON", "LAT", sort_field = "dateTime")
leafletProxy("map", data = d) %>%
addPolylines(color="#0f284a", opacity=0.25, layerId='hurricanePath')
# addPolylines(color="#0f284a", opacity=1, weight=~LON/10)
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',input$time,sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water level at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-13 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(drawGrid = FALSE) %>%
dyLimit(limit=0, label = "flooding", labelLoc = "left",
color = "black", strokePattern = "dashed") %>%
# dyShading(from = "-20", to = "0", color = "#EFEFEF", axis = "y") %>%
dyHighlight(highlightCircleSize = 0, highlightSeriesBackgroundAlpha = 1)  %>%
# Below 0 is gray
dySeries("2096500B", color = "gray") %>%
dySeries("2096960B", color = "gray") %>%
dySeries("2100500B", color = "gray") %>%
dySeries("2102000B", color = "gray") %>%
dySeries("2102500B", color = "gray") %>%
dySeries("2103000B", color = "gray") %>%
dySeries("2104000B", color = "gray") %>%
dySeries("2105769B", color = "gray") %>%
dySeries("2106500B", color = "gray") %>%
dySeries("2108000B", color = "gray") %>%
dySeries("2108566B", color = "gray") %>%
# Above 0 is black
dySeries("2096500A", color = "black") %>%
dySeries("2096960A", color = "black") %>%
dySeries("2100500A", color = "black") %>%
dySeries("2102000A", color = "black") %>%
dySeries("2102500A", color = "black") %>%
dySeries("2103000A", color = "black") %>%
dySeries("2104000A", color = "black") %>%
dySeries("2105769A", color = "black") %>%
dySeries("2106500A", color = "black") %>%
dySeries("2108000A", color = "black") %>%
dySeries("2108566A", color = "black")
})
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
precipColor <- colorBin(palette = c('#edf5e5', '#bcdec9', '#aec8d5', '#8c6bb1', '#9c90ba', '#5d426d', '#361e44'),
bins = 7, pretty = TRUE,
domain = precip_merge$precip)
output$map <- renderLeaflet({ # Build map
leaflet(options = leafletOptions(zoomControl=FALSE, height="100vh")) %>%
addProviderTiles(providers$Esri.WorldTopoMap,
options = providerTileOptions(opacity = 1)) %>%
setView(lng=-76.1637, lat=33.8361, zoom=7) %>%
addMinicharts(lng = streamdata_time_new$dec_long_va,
lat = streamdata_time_new$dec_lat_va,
layerId = streamdata_time_new$station_nm,
type = "bar", maxValues = 42,
width = 15, height = 120, fillColor = "#0f284a")
})
observe({ # Add precip polygons
leafletProxy("map", data = subset(precip_merge, time == input$time)) %>%
removeShape(s) %>%
addPolygons(color = ~precipColor(precip), weight = 0,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.75, layerId=~id)
s <<- subset(precip_merge, time == input$time)$id
})
observe({ # Add gages
data <- subset(streamdata_time_new, dateTime == input$time)
leafletProxy("map") %>%
updateMinicharts(
layerId = data$station_nm,
chartdata = data$flood_norm,
opacity = ifelse(data$flood_norm < 0, 0.25, 1)
)
})
observe({ # Add hurricane path
dat <- subset(pts_wgs84, dateTime <= input$time)
d <- points_to_line(dat, "LON", "LAT", sort_field = "dateTime")
leafletProxy("map", data = d) %>%
addPolylines(color="#0f284a", opacity=0.25, layerId='hurricanePath')
# addPolylines(color="#0f284a", opacity=1, weight=~LON/10)
})
observe({
input$time # Update the time series to align with the map
updated <- stream_ts[paste('2018/',input$time,sep="")]
output$graph <- renderDygraph({
dygraph(updated, main = "Water level at selected USGS gages", width = '270', height = '700') %>%
dyAxis("y", valueRange = c(-18,50), axisLabelWidth = 20) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c("2018-09-13 00:00:00", "2018-09-19 11:00:00"), height = 20) %>%
dyLegend(show="never") %>%
dyOptions(drawGrid = FALSE) %>%
dyLimit(limit=0, label = "flooding", labelLoc = "left",
color = "black", strokePattern = "dashed") %>%
# dyShading(from = "-20", to = "0", color = "#EFEFEF", axis = "y") %>%
dyHighlight(highlightCircleSize = 0, highlightSeriesBackgroundAlpha = 1)  %>%
# Below 0 is gray
dySeries("2096500B", color = "gray") %>%
dySeries("2096960B", color = "gray") %>%
dySeries("2100500B", color = "gray") %>%
dySeries("2102000B", color = "gray") %>%
dySeries("2102500B", color = "gray") %>%
dySeries("2103000B", color = "gray") %>%
dySeries("2104000B", color = "gray") %>%
dySeries("2105769B", color = "gray") %>%
dySeries("2106500B", color = "gray") %>%
dySeries("2108000B", color = "gray") %>%
dySeries("2108566B", color = "gray") %>%
# Above 0 is black
dySeries("2096500A", color = "black") %>%
dySeries("2096960A", color = "black") %>%
dySeries("2100500A", color = "black") %>%
dySeries("2102000A", color = "black") %>%
dySeries("2102500A", color = "black") %>%
dySeries("2103000A", color = "black") %>%
dySeries("2104000A", color = "black") %>%
dySeries("2105769A", color = "black") %>%
dySeries("2106500A", color = "black") %>%
dySeries("2108000A", color = "black") %>%
dySeries("2108566A", color = "black")
})
})
}
shinyApp(ui, server)
